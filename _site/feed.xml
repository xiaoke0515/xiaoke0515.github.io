<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Y.L. Zhao</title>
    <description>My site is built on Nov. 24, 2019. It is used to record something I am interested in.
</description>
    <link>http://localhost:5000/</link>
    <atom:link href="http://localhost:5000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 21 Jul 2020 11:35:03 +0800</pubDate>
    <lastBuildDate>Tue, 21 Jul 2020 11:35:03 +0800</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>GEM5- GEM5 的非 sudo 用户安装</title>
        <description>&lt;p&gt;这篇是好久之前总结的，觉得网上没有相关的资料于是就把这个放上来了。算是比较详细，该踩的坑都踩了。&lt;/p&gt;

&lt;p&gt;需求：gem5仿真器要安装 scons ，需要无sudo权限使用 python-dev ；先试着求助 anaconda ，但无果，最终选择了这种方案。&lt;/p&gt;

&lt;p&gt;大致思路是用源码编译python，之后安装pip，再安装scons。&lt;/p&gt;

&lt;p&gt;当然，如果有 root 权限就简单很多了，直接参考官方文档 &lt;a href=&quot;http://www.gem5.org/&quot;&gt;http://www.gem5.org/&lt;/a&gt; 就可以了。&lt;/p&gt;

&lt;h2 id=&quot;python-和-python-dev-的安装&quot;&gt;Python 和 Python-dev 的安装&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;下载并编译python&lt;/p&gt;

    &lt;p&gt;scons对python版本需求是 python2.7，下安装 python2.7.17&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;源码地址： &lt;a href=&quot;https://www.python.org/downloads/source/&quot;&gt;https://www.python.org/downloads/source/&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;config：&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ./configure --enable-optimizations --prefix=~/.local/python2.7/（安装路径，可自定义）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;make：&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  make &amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;将python路径添加到.bashrc中：&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  export PATH=&quot;路径:$PATH&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编译安装 pip 和 setuptools&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;源码地址： &lt;a href=&quot;https://pypi.org/project/setuptools/#files&quot;&gt;https://www.python.org/downloads/source/&lt;/a&gt; 和 &lt;a href=&quot;https://pypi.org/project/pip/#files&quot;&gt;https://pypi.org/project/pip/#files&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;install，注意这里要确认 python 为刚刚安装的 python ，如果不是，要尝试关闭 conda 等环境。&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  python setup.py install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;修改pip源&lt;/p&gt;

    &lt;p&gt;几个可选的 PYPI 国内源路径:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;阿里云 &lt;a href=&quot;http://mirrors.aliyun.com/pypi/simple/&quot;&gt;http://mirrors.aliyun.com/pypi/simple/&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;豆瓣(douban) &lt;a href=&quot;http://pypi.douban.com/simple/&quot;&gt;http://pypi.douban.com/simple/&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;清华大学 &lt;a href=&quot;https://pypi.tuna.tsinghua.edu.cn/simple/&quot;&gt;https://pypi.tuna.tsinghua.edu.cn/simple/&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;中国科学技术大学 &lt;a href=&quot;http://pypi.mirrors.ustc.edu.cn/simple/&quot;&gt;http://pypi.mirrors.ustc.edu.cn/simple/&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;修改方式：在～/.pip/pip.conf文件中追加如下字段&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; [global]
 index-url=http://pypi.douban.com/simple
 [install]
 trusted-host=pypi.douban.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;scons-的安装&quot;&gt;scons 的安装&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装scons:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;源码地址 &lt;a href=&quot;https://github.com/SCons/scons&quot;&gt;https://github.com/SCons/scons&lt;/a&gt; ,  github上有安装步骤，可自行参考，不赘述&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;bootstrap 的安装：&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;python bootstrap.py build/scons&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;install：&lt;/p&gt;

            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  cd build/scons
  python setup.py install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;gem5的其他依赖&quot;&gt;GEM5的其他依赖&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;M4等： 此处参考 &lt;a href=&quot;https://blog.csdn.net/qq_30549833/article/details/72955881&quot;&gt;https://blog.csdn.net/qq_30549833/article/details/72955881&lt;/a&gt; ，下面的源网站可以根据情况改成最新的版本，四个都要安装在同一个文件夹下，建议安装在~/.local
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;安装m4&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;
            &lt;p&gt;地址:&lt;/p&gt;

            &lt;p&gt;&lt;a href=&quot;http://mirrors.kernel.org/gnu/m4/m4-1.4.13.tar.gz&quot;&gt;http://mirrors.kernel.org/gnu/m4/m4-1.4.13.tar.gz&lt;/a&gt;&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Config:&lt;/p&gt;

            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ./configure –prefix=~/.local（或其他安装路径，下同）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Install:&lt;/p&gt;

            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;安装autoconf&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;
            &lt;p&gt;地址:&lt;/p&gt;

            &lt;p&gt;&lt;a href=&quot;http://mirrors.kernel.org/gnu/autoconf/autoconf-latest.tar.gz&quot;&gt;http://mirrors.kernel.org/gnu/autoconf/autoconf-latest.tar.gz&lt;/a&gt;&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Config:&lt;/p&gt;

            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ./configure –prefix=~/.local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Install:&lt;/p&gt;

            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;安装automake&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;
            &lt;p&gt;地址:&lt;/p&gt;

            &lt;p&gt;&lt;a href=&quot;http://mirrors.kernel.org/gnu/automake/automake-1.11.tar.gz&quot;&gt;http://mirrors.kernel.org/gnu/automake/automake-1.11.tar.gz&lt;/a&gt;&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Config:&lt;/p&gt;

            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ./configure –prefix=~/.local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Install:&lt;/p&gt;

            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;安装libtool&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;
            &lt;p&gt;地址:&lt;/p&gt;

            &lt;p&gt;&lt;a href=&quot;http://mirrors.kernel.org/gnu/libtool/libtool-2.2.6b.tar.gz&quot;&gt;http://mirrors.kernel.org/gnu/libtool/libtool-2.2.6b.tar.gz &lt;/a&gt;&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Config:&lt;/p&gt;

            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ./configure –prefix=~/.local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Install:&lt;/p&gt;

            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Protobuf:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;源码地址： &lt;a href=&quot;https://github.com/protocolbuffers/protobuf.git&quot;&gt;https://github.com/protocolbuffers/protobuf.git&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Update： 这个步骤省了会报错&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;autogen：&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ./autogen.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;config:&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ./configure --prefix = {your_path}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;install:&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  make
  make check
  make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;添加路径在.bashrc文件中，在.bashrc中追加：&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  export PATH=&quot;{your_path}:$PATH&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;添加python依赖 （可选）：&lt;/p&gt;
        &lt;ol&gt;
          &lt;li&gt;
            &lt;p&gt;添加python路径 （就是刚才安装的python路径，添加到 PYTHONPATH 环境变量中）：&lt;/p&gt;

            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; export PYTHONPATH=&quot;{your_path}/lib/python2.7/site-packages/:$PYTHONPATH&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;编译安装&lt;/p&gt;

            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; python setup.py build 
 python setup.py test 
 python setup.py install --prefix={your_path} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;测试，打开一个python，输入下面代码，没有import错误就说明正确安装了&lt;/p&gt;

            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; import google.protobuf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;gem5-的编译&quot;&gt;GEM5 的编译&lt;/h2&gt;

&lt;p&gt;最后就可以编译 GEM5 啦&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;源码：&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://github.com/gem5/gem5.git&quot;&gt;https://github.com/gem5/gem5.git&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编译gem5：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; scons bulid/X86/gem5.opt -j9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;有可能会报错少一些 python module ，这个可以很轻松解决，在此不赘述。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Mon, 20 Jul 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:5000/gem5/2020/07/20/1_GEM_Install.html</link>
        <guid isPermaLink="true">http://localhost:5000/gem5/2020/07/20/1_GEM_Install.html</guid>
        
        <category>GEM5</category>
        
        <category>simulator</category>
        
        <category>cycle accurate</category>
        
        
        <category>GEM5</category>
        
      </item>
    
      <item>
        <title>接网线</title>
        <description>&lt;p&gt;人生中第一次接网线，踩了一些坑。记录一下。&lt;/p&gt;

&lt;h2 id=&quot;解决问题记录&quot;&gt;解决问题记录&lt;/h2&gt;

&lt;h3 id=&quot;工具&quot;&gt;工具&lt;/h3&gt;

&lt;p&gt;网线钳，水晶头若干（一定要买的足够多）&lt;/p&gt;

&lt;h3 id=&quot;步骤&quot;&gt;步骤&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;将外皮剥出足够长。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;解缠绕，拉直所有线。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;按照如下顺序排列：（不同协议可能不同，最好查一下。我这次是同一根网线所以顺序一样即可）&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;橙白-橙-绿白-蓝-蓝白-绿-棕白-棕&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不必剥线，夹断取齐，插入水晶头&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用网线钳夹紧，网线钳夹到完全合死即可。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Tue, 07 Jul 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:5000/others/2020/07/07/2_Net_wire.html</link>
        <guid isPermaLink="true">http://localhost:5000/others/2020/07/07/2_Net_wire.html</guid>
        
        <category>net wire</category>
        
        
        <category>others</category>
        
      </item>
    
      <item>
        <title>Candance 1： Candance的初步使用</title>
        <description>&lt;h2 id=&quot;candance的安装&quot;&gt;Candance的安装&lt;/h2&gt;

&lt;p&gt;使用的是已经安装好的 candance ，没有涉及到安装问题，留出位置，以后遇到问题再补。&lt;/p&gt;

&lt;h2 id=&quot;candance-启动&quot;&gt;Candance 启动&lt;/h2&gt;

&lt;p&gt;命令：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;virtuoso &amp;amp;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在我安装好的这个cadance中，virtuoso 打开的是6.1版本，icfb 打开的是5.1版本。6.1版本用的是oa库，5.1版本用的是cdb库，这两个库不兼容，使用时要注意。在此我用的是6.1版本。&lt;/p&gt;

&lt;h2 id=&quot;安装库&quot;&gt;安装库&lt;/h2&gt;

&lt;p&gt;安装时要注意是 cdb 库还是 oa 库。在我电脑中的库中，SMIC_13mmrf_1P6M_30k 是 cdb 库，FreePDK-45 是 OA 库，所以这里我将安装FreePDK库。&lt;/p&gt;

&lt;p&gt;Tools - Library Manager - File - New Library， Directory选择 /path/to/pdk/FreePDK45/ncsu_basekit/lib/，Name 输入NCSU_Devices_FreePDK45，之后 OK。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/others/2_figure_New_Library.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在如下对话框中选择 Do not need process information 即可。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/others/2_figure_Technology_File_for_New_Library.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之后回到如下界面，在新的Library中出现 cell，即说明安装成功。每一个 cell 都有许多 View。双击一个 view 可浏览，如下图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/others/2_figure_Library_Install_Done.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;新建-cellview&quot;&gt;新建 cellview&lt;/h2&gt;

&lt;p&gt;在安装好库后就可以画 cell 了。在画 cell 之前要新建一个库，用于存放我们画的 cell。步骤与上一节相同，只不过我们的路径选择一个空文件夹即可。在这里我新建的库的名字叫 proj1。&lt;/p&gt;

&lt;p&gt;File - New - CellView， Library 选择我们新建的库， cell 起一个名字（这里我要画一个反相器），Type 选择 schematic。OK 之后就会打开一个画图的界面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/others/2_figure_New_File.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;反相器由两个 mos 组成。接下来我们将画这两个 mos 。 Create - Instance， Library 选择 FreePDK 那个库， cell 选择一个mos， View 选择 Symbol， Name 随意取个名字。此时在光标处就会出现一个 mos 管的形状，点击就可以把它放在任何想要的位置。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/others/2_figure_Add_Instance.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;画好两个 mos 后，接下来增加四个 pin， 分别对应 Vin 、 Vout 、 VDD 、 GND。 Create - Pin ，根据需要选择输入-输出类型，之后添加即可。最后将两个 mos 和四个 pin 用线连接起来。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/others/2_figure_Inverter_Done.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之后 File- Check and Save ，无 error 即可。&lt;/p&gt;

&lt;h2 id=&quot;搭建-inverter-的仿真电路&quot;&gt;搭建 inverter 的仿真电路&lt;/h2&gt;

&lt;p&gt;首先要给我们画的 inverter 创建一个 symbol。这里我们为方便进行自动生成。 Create - CellView - From CellView。 按如下默认设置即可，选择 OK 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/others/2_figure_CellView_from_CellView.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时在 Library Manager 中，我们发现我们画的 inverter 多了个 symbol 的 view，说明创建成功。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/others/2_figure_Add_Symbol_Done.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之后我们将搭建 inverter 的仿真电路。同样地，我们新建一个 cellview，我这里取名为 inverter_sim，按下图添加周边电路元件。下面的元件都可以在 basic 库中找到。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/others/2_fiugre_Inverter_sim.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同样地， check and save。&lt;/p&gt;

&lt;h2 id=&quot;spectre-仿真&quot;&gt;Spectre 仿真&lt;/h2&gt;

&lt;p&gt;在我们的 inverter_sim 的原理图界面，Launch - ADE L。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/others/2_figure_ADEL.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先添加 model library。Setup - Model Library。 路径为 /path/to/pdk/FreePDK45/ncsu_basekit/models/hspice/tran_models ， 把所有的 .inc 文件添加进去。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/others/2_figure_Model_Library_Setup.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Analysis - choose， 这里就和 spice 一样了，选择一种 analysis 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/others/2_figure_Choosing_Analysis.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Simulation - NetList and Run，弹出一个窗口，无 error 和 warning。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/others/2_figure_Simulation.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Results - Direct Plot - Main Form，按如下图选择并在原理图中选择一个点来 plot。我这里选择 inverter 的 Vout，直接在原理图上选择对应位置即可。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/others/2_figure_Direct_Plot_Form.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之后就会弹出一个窗口，就是绘制的曲线。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/others/2_figure_Visualization.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此，我们的第一个 candance project 仿真完成。&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Jul 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:5000/ic/design/2020/07/07/1_Candance_Intro.html</link>
        <guid isPermaLink="true">http://localhost:5000/ic/design/2020/07/07/1_Candance_Intro.html</guid>
        
        <category>ic</category>
        
        <category>candance</category>
        
        <category>virtuoso</category>
        
        
        <category>IC</category>
        
        <category>Design</category>
        
      </item>
    
      <item>
        <title>VMWare 提示与 Hyper-V冲突；如何在Windows 上彻底关闭Hyper-V</title>
        <description>&lt;p&gt;前几天看到Windows功能中的虚拟机功能，突然好奇，手贱给打开了，觉得没什么意思，就也没动。直到今天打开VMWare提示与Hyper-V冲突。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;您的主机不满足在启用 Hyper-V 或 Device/Credential Guard 的情况下运行 VMware。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;打开 VMWare 官方文档就是让关闭 Hyper-V。但是其实在我的个人版 Windows 是没有 Hyper-V 选项的。在搜了半天 Hyper-V 是啥才想到可能是和我前几天打开的那个虚拟机功能有关。&lt;/p&gt;

&lt;p&gt;在我关闭这个功能之后，事情并没有改善，我一度以为思路错了，直到我继续谷歌半天才确定就是这个辣鸡虚拟机功能搞的鬼。***&lt;/p&gt;

&lt;h2 id=&quot;解决问题记录&quot;&gt;解决问题记录&lt;/h2&gt;

&lt;p&gt;原因还是 Hyper-V 和 VMWare 不兼容。所以这里实际记录的实际上是如何彻底关闭 Hyper-V。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;小娜-&amp;gt;启用和关闭Windows功能-&amp;gt;关闭 虚拟机平台（或Hyper-V）&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/others/1_figure_windows_function.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;小娜-&amp;gt;计算机管理-&amp;gt;服务和应用程序-&amp;gt;服务-&amp;gt;把所有带 Hyper-V 的停止并禁用。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/others/1_figure_windows_service.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重启计算机&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;问题解决。&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Jul 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:5000/others/2020/07/06/1_Close_Hyper-V.html</link>
        <guid isPermaLink="true">http://localhost:5000/others/2020/07/06/1_Close_Hyper-V.html</guid>
        
        <category>record</category>
        
        
        <category>others</category>
        
      </item>
    
      <item>
        <title>FMNN 论文：A Switched Operation Approach to Sampled-Data Control Stabilization of Fuzzy Memristive Neural Networks With Time-Varying Delay</title>
        <description>&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;

&lt;p&gt;authors:
Xin Wang , Ju H. Park , Shouming Zhong , and Huilan Yang of Southwest University, Chongqing 400715, China&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;X. Wang, J. H. Park, S. Zhong and H. Yang, “A Switched Operation Approach to Sampled-Data Control Stabilization of Fuzzy Memristive Neural Networks With Time-Varying Delay,” in IEEE Transactions on Neural Networks and Learning Systems, vol. 31, no. 3, pp. 891-900, March 2020, doi: 10.1109/TNNLS.2019.2910574.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is abstract:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This paper investigates the issue of sampled-data stabilization for Takagi-Sugeno fuzzy memristive neural networks (FMNNs) with time-varying delay. First, the concerned FMNNs are transformed into the tractable fuzzy NNs based on the excitatory and inhibitory of memristive synaptic weights using a new convex combination technique. Meanwhile, a switched fuzzy sampled-data controller is employed for the first time to tackle stability problems related to FMNNs. Then, the novel stabilization criteria of the FMNNs are established using the fuzzy membership functions (FMFs)-dependent Lyapunov-Krasovskii functional. This sufficiently utilizes information from not only the delayed state and the actual sampling pattern but also the FMFs. Two simulation examples are presented to demonstrate the feasibility and validity of the proposed method.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;background--takagisugeno-ts-fuzzy-model&quot;&gt;Background : Takagi–Sugeno (T–S) fuzzy model&lt;/h2&gt;

&lt;p&gt;Refering: &lt;a href=&quot;https://wenku.baidu.com/view/5c66a4a5ad51f01dc281f178.html&quot;&gt;T-S模糊模型&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;contribution&quot;&gt;Contribution:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;FMNNs were transformed into the tractable fuzzy NNs using a new convex combination
technique by taking the excitatory and inhibitory of memristive synaptic weights into account.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A switched FSDC (SFSDC) was designed for the first time to solve the stabilization problem of FMNNs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A switched FSDC (SFSDC) was designed for the first time to solve the stabilization problem of FMNNs.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;network-model&quot;&gt;Network Model:&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;(to be continued)&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Jul 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:5000/mnn_paper/2020/07/02/1_FMNN.html</link>
        <guid isPermaLink="true">http://localhost:5000/mnn_paper/2020/07/02/1_FMNN.html</guid>
        
        <category>analog computing</category>
        
        <category>MNN</category>
        
        
        <category>MNN_paper</category>
        
      </item>
    
      <item>
        <title>Time signal 论文：Analysis and Design of Energy Efficient Time Domain Signal Processing</title>
        <description>&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;Zhengyu Chen, Jie Gu, Analysis and Design of Energy Efficient Time Domain Signal Processing, International Symposium on Low Power Electronic Design (ISLPED), 2016.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The paper is &lt;a href=&quot;&amp;quot;dl.acm.org/citation.cfm?id=2934585&amp;quot;&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My first time ever heard about using time signal for ReRAM accelerator. Found this paper to learn some details.&lt;/p&gt;

&lt;p&gt;Let’s see abstract first：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Time domain signal processing (TDSP) encodes information into time rather than voltage with higher efficiency than conventional digital design. This paper performs systematical analysis on the design principle and energy efficiency of TDSP. Variation impact, which poses significant challenges to TDSP, is evaluated and a variation driven design methodology is proposed to achieve an optimum tradeoff between energy efficiency and design robustness. Several novel circuit level design techniques such as dual encoding strategy and bit-scalable design are also proposed in this work to significantly improve the energy efficiency of TDSP. Design example on a critical building block of facial recognition application was used to demonstrate the potential of the technique. The result in a 45nm technology shows 3.3X energy-delay product reduction and 34% area saving can be achieved using TDSP compared with conventional digital.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;1-time-signal-processing&quot;&gt;1. Time signal processing&lt;/h2&gt;

&lt;h3 id=&quot;11-system&quot;&gt;1.1 system&lt;/h3&gt;

&lt;p&gt;System is described in figure below. It’s composed of en/decoders and time domain logic.&lt;/p&gt;

&lt;!--![System overview](/img/ReRAM_DNN_accelerator/1_figure_system.jpg)--&gt;
&lt;p&gt;&lt;img src=&quot;/img/ReRAM_DNN_accelerator/1_figure_system.jpg&quot; alt=&quot;System overview&quot; width=&quot;300&quot; align=&quot;bottom&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;12-time-encoder&quot;&gt;1.2 Time Encoder&lt;/h3&gt;

&lt;p&gt;Time encoder is also called DTC (Digital-to-Time Converter). Figure below shows some impementation of DTCs.&lt;/p&gt;

&lt;!--![TE](/img/ReRAM_DNN_accelerator/1_figure_te.jpg)--&gt;
&lt;p&gt;&lt;img src=&quot;/img/ReRAM_DNN_accelerator/1_figure_te.jpg&quot; alt=&quot;TE&quot; width=&quot;300&quot; align=&quot;bottom&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tech. (a) is proposed in &lt;a href=&quot;https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;amp;arnumber=6630119&quot;&gt;This Paper&lt;/a&gt;. &lt;script type=&quot;math/tex&quot;&gt;T_{in}&lt;/script&gt; is the time signal, such as &lt;em&gt;Step Signal&lt;/em&gt;. &lt;script type=&quot;math/tex&quot;&gt;D_{in}&lt;/script&gt; is the digital signal. By selecting different path with &lt;script type=&quot;math/tex&quot;&gt;D_{in}&lt;/script&gt;, delay of signal &lt;script type=&quot;math/tex&quot;&gt;T_{out}&lt;/script&gt; is decided. The design suffer from energy problem because of (1) multiple gates (2) signal returning to original stage which cause &lt;script type=&quot;math/tex&quot;&gt;2\times&lt;/script&gt; energy consumption.&lt;/p&gt;

&lt;p&gt;Tech. (b) can encode multi-bit with a single inverter. (1) &lt;script type=&quot;math/tex&quot;&gt;3\times&lt;/script&gt; energy saving compared to (a). (2) energy consumption is a constant even if embedding multi-bit.&lt;/p&gt;

&lt;p&gt;Tech. (c)(d) are “Cascade TE”. To be further discuess in the next sections.&lt;/p&gt;

&lt;h3 id=&quot;13-dual-encoding-scheme&quot;&gt;1.3 Dual-encoding Scheme&lt;/h3&gt;

&lt;p&gt;Compared to Tech. (a), which only encode information to only one kind of edge (raising or falling), this scheme means that encode information into both the two edges for energy saving. For more details, please refer to the paper.&lt;/p&gt;

&lt;h3 id=&quot;14-time-logic-cell-tlc&quot;&gt;1.4 Time Logic Cell (TLC)&lt;/h3&gt;

&lt;p&gt;No more words, see the figure below.&lt;/p&gt;

&lt;!--![TLC](/img/ReRAM_DNN_accelerator/1_figure_TLC.jpg)--&gt;
&lt;p&gt;&lt;img src=&quot;/img/ReRAM_DNN_accelerator/1_figure_TLC.jpg&quot; alt=&quot;TLC&quot; width=&quot;300&quot; align=&quot;bottom&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;15-time-decoder&quot;&gt;1.5 Time Decoder&lt;/h3&gt;

&lt;p&gt;A technology is described in figure blew. It is explicit and no more words.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/ReRAM_DNN_accelerator/1_figure_TDC.jpg&quot; alt=&quot;TDC&quot; width=&quot;300&quot; align=&quot;bottom&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-variation-driven-design-methodology&quot;&gt;2. Variation-Driven Design Methodology&lt;/h2&gt;

&lt;h3 id=&quot;21-variation-driven-design&quot;&gt;2.1 Variation driven design&lt;/h3&gt;

&lt;p&gt;The auther introduces a energy-variation trade-off here. Consider the two kind of Tech. (c) (named cascade) and (d) (named cascode). As shown in figure below, cascade-type DTC has a larger energy but a smaller variation. Cascode-type DTC has an opposite characteristic. In order to trade off between energy and variation, a hybrid DTC is used.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/ReRAM_DNN_accelerator/1_figure_tradeoff.jpg&quot; alt=&quot;trade off&quot; width=&quot;500&quot; align=&quot;bottom&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Details of energy consumption and variation is described with the following equations:&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\Delta T_{cascade\_TE}=\sqrt{2N}\sigma_1&lt;/script&gt;&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\Delta T_{cascode\_TE}=\sqrt{\sum_{i=1}^{n}\left(A+N_i\sigma_2\right)^2}&lt;/script&gt;&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\Delta T_{hybrid\_TE}=\sqrt{\sum_{i=1}^m\left(A+N_i\sigma_2\right)^2+\sum_{j=1}^{n-m}2^j\left(A+2^{m-1}\sigma_2\right)^2}&lt;/script&gt;&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;E_{cascade\_TE}=2N\cdot CV_{dd}^2&lt;/script&gt;&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;E_{cascode\_TE}=2nCV_{dd}^2&lt;/script&gt;&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;E_{hybrid\_TE}=\left(m+2^{n-m}\right)*2CV^2=\left(2m+2^{n-m+1}\right)CV^2&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;22-simulated-variation-impact&quot;&gt;2.2 Simulated Variation Impact&lt;/h3&gt;

&lt;p&gt;Simulated variation compared to conventional adder is shown in the figure below. It is amazing that time signal computing can achieve a such low variation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/ReRAM_DNN_accelerator/1_figure_variation_result.jpg&quot; alt=&quot;variation_res&quot; width=&quot;300&quot; align=&quot;bottom&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-case-study&quot;&gt;3. Case Study&lt;/h2&gt;

&lt;p&gt;The following cases are studed in the origin paper:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Big-scalable design&lt;/li&gt;
  &lt;li&gt;Efficient MAX/MIN/CMP operation&lt;/li&gt;
  &lt;li&gt;Parallel operation with short cirtical path&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more details, please refer to the origin paper.&lt;/p&gt;

&lt;h2 id=&quot;4-conclusion&quot;&gt;4. Conclusion&lt;/h2&gt;

&lt;p&gt;Energy and area result is summrized in the following table:&lt;/p&gt;

&lt;!--| | CPU | Conventional ASIC | TDSP |
|:---:|:---:|:---:|:---:|
|Technology||||--&gt;

&lt;table align=&quot;center&quot; border=&quot;1&quot; frame=&quot;box&quot;&gt;
    &lt;tr align=&quot;center&quot;&gt;
        &lt;td&gt;&amp;nbsp;&lt;/td&gt; 
        &lt;th&gt;CPU&lt;/th&gt; 
        &lt;th&gt;Conventional ASIC&lt;/th&gt; 
        &lt;th&gt;TDSP&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr align=&quot;center&quot;&gt;
        &lt;th&gt; Technology &lt;/th&gt;
        &lt;td colspan=&quot;3&quot;&gt; 45nm, 1.1V &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr align=&quot;center&quot;&gt;
        &lt;th&gt; Energy (fJ)&lt;/th&gt;
        &lt;td&gt; 2304 &lt;/td&gt;
        &lt;td&gt; 323 &lt;/td&gt;
        &lt;td&gt; 224.4 &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr align=&quot;center&quot;&gt;
        &lt;th&gt; Area (&lt;span&gt;&lt;script type=&quot;math/tex&quot;&gt;\mu m^2&lt;/script&gt;&lt;/span&gt;)&lt;/th&gt;
        &lt;td&gt; N/A &lt;/td&gt;
        &lt;td&gt; 115 &lt;/td&gt;
        &lt;td&gt; 75.6 &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr align=&quot;center&quot;&gt;
        &lt;th&gt; Delay (ns)&lt;/th&gt;
        &lt;td&gt; 3.2 &lt;/td&gt;
        &lt;td&gt; 0.98 &lt;/td&gt;
        &lt;td&gt; 0.43 &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;thoughts&quot;&gt;Thoughts&lt;/h2&gt;

&lt;p&gt;First ReRAM-based DNN accelerator that uses time signal is &lt;a href=&quot;&quot;&gt;Timely architecture&lt;/a&gt;. The author claims that TDC is much more energy efficient than ADC. This paper solve my confusion on how DTC and TDC works.&lt;/p&gt;

&lt;p&gt;Actually, I think DAC and TDC can also be a conversion pair. With a capacitance used as integrator, along with a comparator, analog signal can be converted to time signal.&lt;/p&gt;

&lt;p&gt;Moreover, the design in timely uses a circuit to store time signal, which is also what I am confused about.&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Jun 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:5000/reram_paper/2020/06/06/1_Time_signal.html</link>
        <guid isPermaLink="true">http://localhost:5000/reram_paper/2020/06/06/1_Time_signal.html</guid>
        
        <category>analog computing</category>
        
        <category>analog signal processing</category>
        
        
        <category>ReRAM_paper</category>
        
      </item>
    
      <item>
        <title>如何在建好TF图后修改图</title>
        <description>&lt;h1 id=&quot;如何在建好tf图后修改图&quot;&gt;如何在建好TF图后修改图&lt;/h1&gt;

&lt;p&gt;网上大部分教程都说tensorflow的图建好后是不能修改的，但是实际上是可以的。&lt;/p&gt;

&lt;h2 id=&quot;operation_update_input函数&quot;&gt;Operation._update_input()函数&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_update_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此函数的作用是将op的第i个输入变成new_tensor。&lt;/p&gt;

&lt;p&gt;下面的例子是用该函数将mul op的输入从b变成c。&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tensorflow&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SaveGraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;makedirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
    
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#build graph  
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# save graph
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SaveGraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'tensorboard/before/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# reroute operation mul
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;consumers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#&amp;lt;op here is the mul operation of d&amp;gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_update_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#&amp;lt;update the first input of op with c&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# save new graph
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SaveGraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'tensorboard/after/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在图建好后，tensorboard中的图如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:5000/img/Tensorflow/1/1_figure_before.jpg&quot; alt=&quot;reroute之前&quot; /&gt;
&lt;!-- (https://github.com/xiaoke0515/xiaoke0515.github.io/blob/master/content/Tensorflow/1-figure_before.jpg)--&gt;&lt;/p&gt;

&lt;p&gt;在修改图时，首先用consumers函数求b节点的所有下一级节点，即mul节点。随后用op._update_input()函数来将mul的第1个输入从b节点变成c节点。修改后图如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:5000/img/Tensorflow/1/1_figure_after.jpg&quot; alt=&quot;reroute之后&quot; /&gt;
&lt;!-- (https://github.com/xiaoke0515/xiaoke0515.github.io/blob/master/content/Tensorflow/1-figure_after.jpg)--&gt;&lt;/p&gt;

&lt;p&gt;这样，mul的输入从b节点变成了c节点。&lt;/p&gt;

&lt;h2 id=&quot;在某个节点后插入op&quot;&gt;在某个节点后插入op&lt;/h2&gt;

&lt;p&gt;这个是在看tensorflow.contrib.quantize模块的create_training_graph函数代码后学会的。实现了个简单的InsertOP函数来完成这个功能。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InsertOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out_tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exclude_consumers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;consumers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_tensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;consumers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;con&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;con&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exclude_consumers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;con&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;con&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_update_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out_tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;in_tensor：在此tensor后插入op。&lt;/li&gt;
  &lt;li&gt;out_tensor：插入的op的输出的tensor。&lt;/li&gt;
  &lt;li&gt;exclude_consumers：是一个op的列表，表示in_tensor的所有consumer中，不希望插入out_tensor的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用法：&lt;/p&gt;

&lt;p&gt;首先，定义一个要插入的op：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out_tensor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NewOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exclude_consumers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out_tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exclude_consumers&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;它输出两个变量：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;out_tensor：NewOP输出的tensor。&lt;/li&gt;
  &lt;li&gt;exclude_consumers：插入的NewOP给in_tensor带来的新的consumers，这是一个值得注意的地方。
如果NewOP是一个节点，则exclude_consumers=[NewOP]；
如果NewOP是一个子图，那么exclude_consumers则是NewOP子图中所有的in_tensor的consumer。
如果不把这些consumer排除，那么在InsertOP后计算图会形成环。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;之后再用InsertOP函数插入NewOP。&lt;/p&gt;
</description>
        <pubDate>Wed, 03 Jun 2020 12:25:00 +0800</pubDate>
        <link>http://localhost:5000/tensorflow/2020/06/03/1_Reroute_Tensor.html</link>
        <guid isPermaLink="true">http://localhost:5000/tensorflow/2020/06/03/1_Reroute_Tensor.html</guid>
        
        <category>tensorflow</category>
        
        
        <category>tensorflow</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 02 Jun 2020 23:17:39 +0800</pubDate>
        <link>http://localhost:5000/jekyll/update/2020/06/02/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://localhost:5000/jekyll/update/2020/06/02/welcome-to-jekyll.html</guid>
        
        <category>test</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
